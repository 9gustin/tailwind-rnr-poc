import React from "react";
import "./style.css";

export default function App() {
  return (
<div class="rnr-container"><p class="rnr-paragraph">Uno cuando arranca en el mundo del desarrollo le emociona escribir en uno de esos editores de texto oscuros con letras de colorcitos, el mas popular de la actualidad es <a href="https://code.visualstudio.com/" class="" target="_blank" rel="noreferrer">Visual Studio Code</a>, porque es gratis y super personalizable.</p><p class="rnr-paragraph">Después empezamos a escribir código, hacemos nuestros primeros proyectitos y nos enteramos de la existencia de <span class="rnr-bold">git</span> y <span class="rnr-bold">github</span>. No pretendo hacer un articulo super detallado sobre estos conceptos sino apuntar este articulo a como manejar <span class="rnr-bold">git </span>desde el vs code con explicaciones básicas sobre los distintos conceptos(commits, push, pull, etc). En mi caso manejar <span class="rnr-bold">git </span>desde el vs code me ayudo un montón para aprenderlo.</p><p class="rnr-paragraph">Si no tenes conocimientos en <span class="rnr-bold">git </span>recomiendo este articulo de <span class="rnr-bold">freeCodeCamp </span>en donde habla sobre <span class="rnr-bold">git </span>y <span class="rnr-bold">github</span>. Me parece bastante completo: </p><p class="rnr-paragraph"><a href="https://www.freecodecamp.org/news/what-is-git-and-how-to-use-it-c341b049ae61/" class="" target="_blank" rel="noreferrer">An introduction to Git: what it is, and how to use it</a></p><a href="#pre-requisitos" class="title"><h2 class="rnr-heading_2" id="pre-requisitos">Pre-requisitos</h2></a><p class="rnr-paragraph">Antes de empezar vas a necesitar dos cosas:</p><ul class=" rnr-bulleted_list_item"><li class="rnr-bulleted_list_item">Tener instalado <a href="https://git-scm.com/" class="" target="_blank" rel="noreferrer">git</a> y <a href="https://code.visualstudio.com/" class="" target="_blank" rel="noreferrer">vs code</a></li><li class="rnr-bulleted_list_item">Tener una cuenta de <a href="https://github.com/" class="" target="_blank" rel="noreferrer">GitHub</a></li></ul><a href="#inicializando-el-repo" class="title"><h2 class="rnr-heading_2" id="inicializando-el-repo">Inicializando el repo</h2></a><p class="rnr-paragraph">Lo primero que vamos a hacer es abrir en el vs code la carpeta a la que queremos aplicar control de archivos. En mi caso voy a hacerlo con una carpeta llamada <span class="rnr-bold">git-example </span>pero vos si queres podes hacerlo con algo que estés codeando en este momento y quieras subir a <span class="rnr-bold">GitHub</span>.</p><p class="rnr-paragraph">Una vez dentro del vs code vamos a ir sobre el sidebar al icono que es una bifurcacion, este es el que representa a <span class="rnr-bold">git</span> dentro de vs code. Dentro de esta menu vamos a tener dos opciones:</p><p class="rnr-paragraph"><a target="_blank" rel="noreferrer"><img src="https://github.com/9gustin/personal-blog/blob/main/resources/8-git-in-vs-code/git-init.png?raw=true" alt="Inicializar un repo en VS Code"/></a></p><a href="#initialize-repository" class="title"><h3 class="rnr-heading_3" id="initialize-repository">Initialize Repository</h3></a><p class="rnr-paragraph">Con esta opción podemos convertir la carpeta en repositorio. Esto seria solo en local y lo único que hará seria crear la carpeta<span class="rnr-bold"> </span><span class="rnr-bold
  
  rnr-italic">.git</span><span class="rnr-italic">. </span>Si utilizamos esta opción igual después podemos subir nuestro código a GitHub.</p><p class="rnr-paragraph">Esta opción ejecutaría en la consola:</p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">git init</span></p><a href="#publish-to-github" class="title"><h3 class="rnr-heading_3" id="publish-to-github">Publish to GitHub</h3></a><p class="rnr-paragraph">Esta opción sirve para subir todo lo que tenemos en la carpeta sobre la que estamos parados a GitHub. </p><p class="rnr-paragraph">Para poder utilizarla lo primero que te va a pedir es sincronizar tu cuenta de GitHub al vs code. Concedemos el permiso, retornamos al editor y una vez ahí nos pide el nombre del repositorio y si queremos que sea publico o privado. Recorda que los nombres de tus repositorios deben ser únicos entre si, o sea que no podes ponerle un nombre de repositorio que ya tengas.</p><p class="rnr-paragraph">Después de eso se creara el repo en nuestra cuenta y vs code nos muestra una notificación con la que podemos acceder a el rápidamente.</p><p class="rnr-paragraph">Y si accedemos a la URL veremos todo nuestro código subido a GitHub. Personalmente utilizo esta opción, ya que vincula mi carpeta con el repo de GitHub y queda todo listo para seguir trabajando e ir commiteando y pusheando.</p><p class="rnr-paragraph">Esta opción ejecutaría en la consola:</p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">git init</span></p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">git add .</span></p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">git commit -m "first commit"</span></p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">(Crea un repositorio vacío con el nombre indicado en GitHub y toma la url del remote)</span></p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">git remote add origin REMOTE_URL </span></p><p class="rnr-paragraph"><span class="rnr-blue">git push -u origin master</span></p><a href="#haciendo-commits-y-sincronizando-con-github" class="title"><h2 class="rnr-heading_2" id="haciendo-commits-y-sincronizando-con-github">Haciendo commits y sincronizando con GitHub</h2></a><p class="rnr-paragraph">No importa que opción hayas elegido, vs code contempla ambos casos y vas a tener mas ocasiones si todavía no lo subiste.</p><p class="rnr-paragraph">Para este ejemplo voy a partir con dos archivos: </p><p class="rnr-paragraph"><span class="rnr-italic">main.js</span></p><p class="rnr-paragraph"><span class="rnr-italic">index.js</span></p><p class="rnr-paragraph">Acá no es relevante el contenido de cada uno, lo importante es que ambos estaban dentro de la carpeta que estamos controlando. Lo que voy a hacer es eliminar el archivo <span class="rnr-italic">main.js</span>, cambie el contenido del archivo <span class="rnr-italic">index.js</span> y agregue un<span class="rnr-italic"> index.html</span></p><a href="#commit-guardar-cambios-localmente" class="title"><h3 class="rnr-heading_3" id="commit-guardar-cambios-localmente">Commit: Guardar cambios localmente</h3></a><p class="rnr-paragraph">Una vez que realizo estas acciones se podría decir que hice 3 cambios, agregue un archivo, elimine otro y modifique el restante. Estos cambios se cuentan por archivo, no importa cuanto cambiaste dentro de cada uno sino que importa la <span class="rnr-bold">cantidad de archivos modificados</span>. Este numero es un buen indicador, ya que generalmente se trata de no subir <span class="rnr-bold">commits </span>con muchos archivos modificados.</p><p class="rnr-paragraph">El <span class="rnr-bold">commit </span>sirve para guardar las cambios hasta cierto punto, es como un checkpoint de algún jueguito. Si te pasa algo y rompes todo podes volver a ese punto.</p><p class="rnr-paragraph">Para hacer <span class="rnr-bold">commits </span>vamos a ir a la sección donde antes iniciamos el repo. Ahora va a lucir diferente, si hicimos cambios el icono de esta sección va a tener el numero de archivos que modificamos y vamos a ver los mismos listados dentro, en cambio, si no hicimos cambios sobre nuestros archivos el listado va a estar vacío.</p><p class="rnr-paragraph">En mi caso, como realice los 3 cambios se va a ver asi:</p><p class="rnr-paragraph"><a target="_blank" rel="noreferrer"><img src="https://github.com/9gustin/personal-blog/blob/main/resources/8-git-in-vs-code/git-commit.png?raw=true" alt="Vista de commits en VS Code"/></a></p><p class="rnr-paragraph">Acá vamos a ver listados 3 tipos de archivos y su tipo lo vemos en la misma fila que el nombre, bien a la derecha. Tenemos los siguiente tipos:</p><p class="rnr-paragraph">U: Untracked. Este archivo es nuevo y hasta hoy en día no esta siendo trackeado por <span class="rnr-bold">git</span>.</p><p class="rnr-paragraph">D: Deleted. Este archivo fue eliminado, además se va a ver el nombre <span class="rnr-strikethrough">tachado</span>.</p><p class="rnr-paragraph">M: Modified. Este archivo fue modificado.</p><p class="rnr-paragraph">Sin importar el tipo tenemos además 3 opciones que aparecen cuando hacemos hover sobre cualquiera de los archivos. En mi caso estoy haciendo hover en index.html y puedo:</p><p class="rnr-paragraph">Con el iconito de archivo puedo abrirlo y ver que cambios se realizaron, veremos en rojo lo que se quito y en verde lo que se agrego.</p><p class="rnr-paragraph">Con la flecha podemos descartar <span class="rnr-bold">todos </span>los cambios dentro de ese archivo. Previamente nos muestra un mensaje de confirmación si lo presionamos.</p><p class="rnr-paragraph">Y por ultimo con el <span class="rnr-bold">+</span> podemos agregar esos cambios a los staged changes, o "los cambios que seleccionamos para commitear"</p><p class="rnr-paragraph">Una vez que hayamos revisado los cambios que hicimos vamos a escribir en el input nuestro mensaje del commit y arriba a la derecha del input vamos a encontrar un <span class="rnr-bold">check</span> entre las opciones y desde ahí commiteamos los archivos.</p><p class="rnr-paragraph">Una cosa a tener en cuenta, si no tenemos ningún cambio agregado a los cambios seleccionados (con el botón +) se van a commitear todos los cambios listados. En cambio, si nosotros seleccionamos solo algunos que queremos se incluyen esos nomas en el commit.</p><p class="rnr-paragraph">Esta opción ejecutaría en la consola:</p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">git add . </span>o en caso de que hayamos seleccionado archivos particulares: solo agregara esos.</p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">git commit -m "INPUT_VALUE"</span></p><a href="#sincronizar-tus-cambios-con-github-push-y-pull" class="title"><h3 class="rnr-heading_3" id="sincronizar-tus-cambios-con-github-push-y-pull">Sincronizar tus cambios con GitHub (Push y Pull)</h3></a><p class="rnr-paragraph">Bien, ahora vamos a subir nuestros cambios al repositorio remoto.</p><p class="rnr-paragraph"><a target="_blank" rel="noreferrer"><img src="https://github.com/9gustin/personal-blog/blob/main/resources/8-git-in-vs-code/git-sync.png?raw=true" alt="Editor VS Code"/></a></p><p class="rnr-paragraph">Acá esta mi editor de texto, ahora vamos a usar las opciones de abajo a la izquierda(estas opciones se habilitan cuando tenes abierta una carpeta que ya tiene <span class="rnr-bold">git </span>iniciado). Particularmente para esto nos vamos a parar en el cuadrado amarillo.</p><p class="rnr-paragraph">Esta opción sirve para sincronizar tus commits con GitHub. Hay dos casos: </p><ul class=" rnr-bulleted_list_item"><li class="rnr-bulleted_list_item">En mi caso solo inicialice <span class="rnr-bold">git </span>con la opción de inicializar, sin subir a GitHub entonces tengo una nubecita con una flecha, si aprieto esta opción me dejaría crear el repo a donde quiero subir estos archivos. </li><li class="rnr-bulleted_list_item">Una vez que ya tenes tu repo sincronizado con un repo de GitHub te van a aparecer dos flechas que forman un circulo. Con esta opción podes subir tus commits y además traer los commits que estén en el repositorio remoto. Una aclaración: no es necesario tener cambios para subir y bajar siempre, si no hay nada nuevo igual podes traer lo nuevo del repo o viceversa.</li></ul><p class="rnr-paragraph">Esta opción ejecutaría en la consola:</p><p class="rnr-paragraph">Si nunca subimos los cambios previamente</p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">(Crea un repositorio vacío con el nombre indicado en GitHub y toma la url del remote)</span></p><p class="rnr-paragraph"><span class="rnr-italic
  
  
  rnr-blue">git remote add origin REMOTE_URL </span></p><p class="rnr-paragraph"><span class="rnr-blue">git push -u origin master</span></p><p class="rnr-paragraph">Si ya vinculamos previamente nuestro repo:</p><p class="rnr-paragraph"><span class="rnr-blue">git pull</span></p><p class="rnr-paragraph"><span class="rnr-blue">git push</span></p><a href="#utilizando-ramas" class="title"><h2 class="rnr-heading_2" id="utilizando-ramas">Utilizando ramas</h2></a><p class="rnr-paragraph">Bueno, ramas, hasta ahora con lo que vimos te vas a poder manejar bien en repos personales y sencillos, pero una vez que quieras colaborar o trabajar cosas en paralelo vas a necesitar usar ramas.</p><p class="rnr-paragraph">Para esto nos dirigimos, dentro del editor a la esquina inferior izquierda(esta marcado en la imagen anterior en un recuadro rojo) ahí vamos a saber en que rama estamos parados.</p><p class="rnr-paragraph">Cuando queremos movernos a otra rama tenemos que hacer click sobre la rama en la que estamos, va a aparecer un menú en donde podemos:</p><ul class=" rnr-bulleted_list_item"><li class="rnr-bulleted_list_item">Crear una nueva rama (que nace desde la rama en la que estamos parados, en mi caso va a ser igual a master)</li><li class="rnr-bulleted_list_item">Crear una nueva rama desde....(Acá vamos a poder elegir desde que rama queremos que nazca)</li><li class="rnr-bulleted_list_item">Elegir una rama de las que ya creamos para movernos hacia ella</li></ul><p class="rnr-paragraph">Es importante tener en cuenta que preferentemente debemos dejar todo commiteado antes de cambiar de rama(a menos que esos cambios no los queramos en esa rama y nos hayamos confundido).</p><p class="rnr-paragraph">Después todo es igual que lo que ya vimos. Si te moves a otra rama las modificaciones y los commits solo afectan a esa rama.</p><p class="rnr-paragraph">Esta opción ejecutaría en la consola:</p><p class="rnr-paragraph">Si se crea una nueva rama:</p><p class="rnr-paragraph"><span class="rnr-blue">git checkout -b BRANCH_NAME_INPUT</span></p><p class="rnr-paragraph">Si te moves a una rama existente</p><p class="rnr-paragraph"><span class="rnr-blue">git checkout BRANCH_NAME_INPUT</span></p><a href="#finalizando" class="title"><h2 class="rnr-heading_2" id="finalizando">Finalizando ;)</h2></a><p class="rnr-paragraph">En este articulo vimos bastante contenido teórico, te invito a que pruebes todo, <span class="rnr-bold">git </span>se aprende haciendo. Existen muchos cheatsheets, mucha documentación, pero la verdadera manera de aprender es la practica. Gracias por leer 😁</p><a href="#escenas-post-creditos" class="title"><h3 class="rnr-heading_3" id="escenas-post-creditos">Escenas post-creditos</h3></a><p class="rnr-paragraph">Un par de cositas mas:</p><ul class=" rnr-bulleted_list_item"><li class="rnr-bulleted_list_item">Al inicio te salta una notificación tipo "Queres que se ejecute<span class="rnr-italic"> git fetch</span> diario?". Esto es super útil para saber si hay cambios en el remoto. Lo que hace<span class="rnr-italic"> git fetch</span> es preguntar al repo remoto si hay commits para traer y en caso de haber te los muestra en el icono de sincronizar para que los tengas presente.</li><li class="rnr-bulleted_list_item">También te quería compartir una extensión que utilizo para <span class="rnr-bold">git</span>: <a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" class="" target="_blank" rel="noreferrer">GitLens</a>. Yo la uso para ver el grafico con el historial de commits en las distintas ramas, pero tiene muchas funcionalidades de <span class="rnr-bold">git </span>integradas.</li></ul></div>
  );
}
